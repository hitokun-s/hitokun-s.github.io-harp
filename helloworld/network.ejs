<%- include('../_lib') %>
<% title = "Network - Adventure of HelloWorld" %>
<% dependsOn(title, ["font-awesome", "jquery", "d3.v3"]); %>



        <style>
            svg{
                width:100%;
                height:400px;
            }
        </style>
        <div id="content">
            <p>I got networked!</p>
            <div class="text-center">
                <svg></svg>
            </div>
        </div>
        <script>
            var graph = {nodes: [
                    {id: 1, letter: "H"},
                    {id: 2, letter: "E"},
                    {id: 3, letter: "L"},
                    {id: 4, letter: "L"},
                    {id: 5, letter: "O"}
                ],
                links: [
                    {source: 0, target: 1},
                    {source: 0, target: 2},
                    {source: 0, target: 3},
                    {source: 0, target: 4},
                    {source: 1, target: 2},
                    {source: 1, target: 3},
                    {source: 1, target: 4},
                    {source: 2, target: 3},
                    {source: 2, target: 4},
                    {source: 3, target: 4}
                ]
            };

            var newData = [
                {node: {id: 6, letter: "W"}, links: [5]},
                {node: {id: 7, letter: "O"}, links: [6]},
                {node: {id: 8, letter: "R"}, links: [7,6]},
                {node: {id: 9, letter: "L"}, links: [8,6,7]},
                {node: {id: 10, letter: "D"}, links: [9,8,7,6]}
            ];

            var svg = d3.select("svg");
            var force;

            var update = function() {

                var link = svg.selectAll(".link")
                        .data(force.links(), function(d) {
                            return d.source.id + "-" + d.target.id;
                        });
                link.enter().append("line").classed("link", true)
                        .attr({
                            "stroke-width": 2,
                            stroke: "gray"
                        });
                link.exit().remove();

                var node = svg.selectAll(".node")
                        .data(force.nodes(), function(d) {
                            return d.id;
                        });
                var node_g = node.enter().append("g").classed("node", true);

                node_g.append("circle")
                        .attr({
                            r: 10,
                            stroke: "blue",
                            "stroke-width": 2,
                            fill: "yellow"
                        });
                node_g.append("text").text(function(d) {
                    return d.letter;
                }).attr({
                    stroke: "red",
                    "dominant-baseline": "middle" // verticla centering
                }).attr("x", function() {
                    return -this.getBBox().width / 2; // horizontal centering
                });
                node.exit().remove();

                // node forward, link backward
                svg.selectAll(".node, .link").sort(function(a, b) {
                    var aIsNode = (a.source === undefined);
                    var bIsNode = (b.source === undefined);
                    if (aIsNode && !bIsNode) {
                        return 1;
                    }
                    if (!aIsNode && bIsNode) {
                        return -1;
                    }
                    return 0;
                });

                force.on('tick', function() {
                    link.attr({
                        'x1': function(d) {
                            return d.source.x;
                        },
                        'y1': function(d) {
                            return d.source.y;
                        },
                        'x2': function(d) {
                            return d.target.x;
                        },
                        'y2': function(d) {
                            return d.target.y;
                        }
                    });
                    node.attr("transform", function(d) {
                        return "translate(" + d.x + "," + d.y + ")";
                    });
                });
            };

            var addNode = function(n) {
                force.nodes().push(n);
            };

            var addLink = function(l) {
                force.links().push(l);
            };

            var addNodeWithLinks = function(_node, _links) {
                addNode(_node);
                _links.forEach(function(idx){
                    addLink({source: findNodeById(_node.id), target: findNodeById(idx)});
                });
                
            };

            var findNodeById = function(id) {
                // Array.filter is valid after ECMAScript5
                return force.nodes().filter(function(v) {
                    return v.id === id;
                })[0];
            };

            var Iterator = function(array) {
                var idx = -1;
                this.next = function() {
                    idx++;
                    if (idx >= array.length)
                        return null;
                    return array[idx];
                };
            };
            var it = new Iterator(newData);

            $(function() {
                force = d3.layout.force()
                        .charge(-340)
                        .linkDistance(100)
                        .size([parseInt(svg.style("width")), parseInt(svg.style("height"))]);
                force.nodes(graph.nodes).links(graph.links);
                force.start();

                update();

                var interval = setInterval(function() {
                    var elm = it.next();
                    if (elm) {
                        force.stop();
                        addNodeWithLinks(elm.node, elm.links);
                        update();
                        force.start();
                    } else {
                        window.clearInterval(interval);
                    }
                }, 1000);
            });
        </script>

