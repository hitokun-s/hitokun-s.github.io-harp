<%- include('../_lib') %>
<% title = "Secret of 1/71" %>
<% dependsOn(title, ["d3.v3", "prefixfree", "font-awesome", "canvg"]); %>

    <script src="js/timer.js"></script>

    <style>
        #play-content{
            font-family: "Georgia";
        }

        svg{
            border:solid 1px black;
            display:block;
            margin-left:auto;
            margin-right:auto;
        }
        #play-content > svg svg{
            overflow: visible !important;
        }
        .line{
            stroke-width:1.5px;
        }
        .walking{
            border: solid 2px red;
            border-radius:2px;
        }
        #blocknum{
            color:red;
            font-size:20px;
        }
        #decimal{
            font-size:20px;
            display: inline-block;
            padding: 3px;
        }
        #decimal::after{
            content:"...";
        }
        #play-content div{
            margin-bottom:7px;
        }
    </style>

<div class="container">
    <div class="row">
        <div class="col-lg-2"></div>
        <div id="play-content" class="col-lg-8">
            <h1 class="page-header">
                The Secret of 1/71
            </h1>
            <p>Do you know the answer of 1 / 71 ?</p>
            <p>Easy question? But did you notice the scenery in front of you?</p>
            <div id="decimal">1/71 = <span>0.</span></div>
            <div>Let's walk along the answer. Go <span id="blocknum"></span> blocks, & turn right</div>
            <button onClick="saveImage()">save image</button>
            <canvas id="canvas" width="650px" height="650px" style="display:none"></canvas>
        </div>
        <div class="col-lg-2"></div>
    </div>
</div>

<script>

    var width = 500;
    var height = 500;

    var Drawer = function(tgt) {
        var tgt = tgt;
        var i = 0;
        k = 0;
        var showDigit = true;
        var preX = 0, preY = 0;

        this.draw = function() {

            var val = parseInt(tgt.charAt(i));

            if(showDigit){
                $("#decimal span").eq(i).removeClass("walking");
                $("#decimal span").eq(i + 1).addClass("walking");
            }

            $("#blocknum").text(val);
            var nowX = preX, nowY = preY;
            var angle;
            switch (k % 4) {
                case 0:
                    nowX = preX + val;
                    angle = 0;
                    break;
                case 1:
                    nowY = preY + val;
                    angle = 90;
                    break;
                case 2:
                    nowX = preX - val;
                    angle = 180;
                    break;
                case 3:
                    nowY = preY - val;
                    angle = -90;
                    break;
            }
            arrow.attr({
                x: xScale(preX),
                y: yScale(preY),
                transform: "translate(" + xScale(preX) + "," + yScale(preY) + ") rotate(" + angle + ")"
            }).extendTo(xScale(val), function(x1, y1, x2, y2) {
                var f = function() {
                    var preLine = d3.select("svg g").append("line").classed("line", true);
                    preLine.attr({
                        x1: xScale(x1),
                        y1: yScale(y1),
                        x2: xScale(x2),
                        y2: yScale(y2),
                        stroke: "black"
                    });
                };
                return f;
            }(preX,preY,nowX,nowY));
            preX = nowX;
            preY = nowY;

            i++;
            k++;
            if (showDigit && i >= tgt.length) {
                $("#decimal span").eq(i).removeClass("walking");
                showDigit = false;
            }
            if( i >= tgt.length) i = 0;
        };
    };


    var rotate = function(arr, deg) {
        var rad = deg * Math.PI / 180;
        return [arr[0] * Math.cos(rad) - arr[1] * Math.sin(rad),
                    arr[0] * Math.sin(rad) + arr[1] * Math.cos(rad)];
    };

//    var unit = "153846";//1/71
    var unit = "01408450704225352112676056338028169";//1/71

    var xScale = d3.scale.linear()
            .domain([-20, 20])
            .range([-width / 2, width / 2]);

    var yScale = d3.scale.linear()
            .domain([20, -20])
            .range([height / 2, -height / 2]);

    var svg = d3.select("#play-content").append("svg")
            .attr("width", xScale(24))
            .attr("height", yScale(24));


    svg.append("g").attr("transform", "translate(" + xScale(6) + "," + yScale(8) + ")");

    var createGrid = function() {
        for (var i = -20; i <= 20; i++) {
            d3.select("svg g").append("line")
                    .attr({
                        class: "grid",
                        x1: xScale(-20),
                        y1: yScale(i),
                        x2: xScale(20),
                        y2: yScale(i)
                    });
            d3.select("svg g").append("line")
                    .attr({
                        class: "grid",
                        x1: xScale(i),
                        y1: yScale(-20),
                        x2: xScale(i),
                        y2: yScale(20)
                    });
        };
        d3.selectAll(".grid").attr({
            stroke : "gray",
            "stroke-width": 0.2
        });
    };

    //t:thickness
    var Arrow = function(parent, t) {
        var g = parent.append("g").attr({
            x: 0,
            y: 0
        });
        var body = g.append("svg").attr({
            x: 0,
            width: 30,
            height: t,
            overflow: "visible"
        });
        body.append("rect").attr({
            x: "0",
            y: -t / 4,
            width: "100%",
            height: t / 2,
            fill: "red"
        });
        body.append("svg").attr({
            x: "100%",
            y: 0,
            overflow: "visible"
        }).append("polygon").attr({
            points: "0," + (-t / 2) + " " + t / 2 + ",0 0," + t / 2,
            fill: "red"
        });
        this.extendTo = function(length, callback) {
            body.attr("width", 0).transition().delay(100).duration(200).attr("width", length).each("end", callback);
        };
        this.attr = function(param) {
            g.attr(param);
            return this;
        };
    };
    var arrow = new Arrow(d3.select("svg g"), 20);

    var doAfter = function(){
        d3.selectAll(".grid").transition().duration(1000).remove();
        arrow.attr({visibility:"hidden"});
    };


    $(function() {
        for(var i = 0;i < unit.length;i++){
            $("#decimal").append("<span>" + unit.charAt(i) + "</span>");
        };
        createGrid();
        var drawer = new Drawer(unit);
        var timer = new Timer(drawer.draw, doAfter, unit.length * 4);
        timer.start();
    });

    var saveImage = function(){
        //var svgText = document.getElementsByTagName('svg')[0].innerHTML;
        //canvg('canvas', svgText, {scaleWidth:2, scaleHeight:2 });
        var canvas = document.getElementById('canvas');
        var ctx = canvas.getContext('2d');
        ctx.scale(13/6, 13/6);
        ctx.drawSvg(document.getElementsByTagName('svg')[0].innerHTML);
        canvas.toBlob(function(blob) {
            saveAs(blob, "secret_of_71.png");
        }, "image/png");
        ctx.scale(6/13, 6/13);
    }

</script>