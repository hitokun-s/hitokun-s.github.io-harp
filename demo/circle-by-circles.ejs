
<% title = "Aggregated Particle" %>
<% dependsOn( ["processing"]); %>

<% image = "image/circle_by_circles.png" %>

<script type="text/javascript">
    var p;
    var canvas;
    window.onload = function() {
        canvas = document.getElementsByTagName('canvas')[0];

  // Processing のソースコードが書かれた script 要素
        var codeElm = document.getElementById('processing-code');
  // 要素の内容を取得する
        var code = codeElm.textContent || codeElm.innerText;
        p = new Processing(canvas, code);
        $(codeElm).remove();
    };

</script>
<script id="processing-code" type="application/processing">

int w;
int h;

ArrayList combis = new ArrayList();
Circle c0,c1;

void setup(){
   w = $(canvas).width(); //convert dom object "canvas" to jquery object 
   h = $(canvas).height();
   size(w, h);
   noStroke();//アウトラインなし
   //frameRate(300);
   noLoop();//drawを1回だけ実行
   translate(w /2, h /2);
   
   int j = 35
   c0 = new Circle(j--);
   circles.add(c0);
   c1 = new Circle(j--);
   circles.add(c1);
   c1.x = c0.x;
   c1.y = c0.y + c0.r + c1.r;
   //combis.add(new Combi(c0, c1));
   while(j > 0){
       for(int k = 0;k < 100/j;k++)
       circles.add(new Circle(j));
       j--;
   }
   
   console.log("here1");
   sortCircles();
   console.log("here2");
   
   //まず中心円の周囲に並べてしまう。c1とのinterfereが生じるまで。
   int s = 2;
   while(true){
       Circle pre = circles.get(s - 1);
       Circle c = circles.get(s);
       if(!setAroundCenterNextTo(c, pre,s))break;
       if(s == circles.size() - 1)break;
       s++;
   }
   for(int i = s;i < circles.size();i++){
        console.log("circle setting");
        Circle c = circles.get(i);
        setToNearest(c);
   }
   console.log("here3 combis:" + combis.size());
}

boolean setAroundCenterNextTo(Circle _c, Circle pre, int idx){
        float a = pre.r + c0.r;
        float b = pre.r + _c.r;
        float c = c0.r + _c.r;        
        float cos_theta = (sq(a) + sq(b) - sq(c))/(2 * a * b);
        float sin_theta = sqrt(1 - sq(cos_theta));
        float relX = c0.x - pre.x;
        float relY = c0.y - pre.y;
        float newX1 = (b/a) * (relX * cos_theta - relY * sin_theta);
        float newY1 = (b/a) * (relX * sin_theta + relY * cos_theta);
        _c.x = pre.x + newX1;
        _c.y = pre.y + newY1;
        if(idx == 2 ||dist(_c.x, _c.y, c1.x, c1.y) >= _c.r + c1.r){
            combis.add(new Combi(_c, pre));
            return true;
        }else{
            combis.add(new Combi(pre, c1));
            return false;
        }
}

class Dot{
    float x,y;
    Dot(float _x, float _y){
        x = _x;
        y = _y;
    }
    float dist2(){
        return x * x + y * y;
    }
}

void setToNearest(Circle c){
    Dot res = new Dot(2000, 2000);
    Combi resCombi= null;
    for(int i = 0;i < combis.size();i++){
        Combi combi = combis.get(i);
        Dot d = combi.getDotWhenAttached(c);
        if(d.dist2() < res.dist2()){
            res = d;
            resCombi = combi;
        }
    }
    if(resCombi == null){
        console.log("x:"+c.x+" y:"+c.y);
        return;
    }
    c.x = res.x;
    c.y = res.y;
    resCombi.attach(c);
}

void showAdvocate(Circle c){
    fill(0,0,255);
    for(int i = 0;i < combis.size();i++){
        Combi combi = combis.get(i);
        Dot d = combi.getDotWhenAttached(c);
        console.log("x:"+d.x + " y:"+d.y);
        ellipse(d.x, d.y, 2*c.r, 2*c.r);
    }
}

void sortCircles(){
    int cnt = circles.size();
    Circle[] c_array = new Circle[cnt];
    for(int i = 0;i < cnt;i++){
        c_array[i] = circles.get(i);
    }
    c_array.sort(
	function(a,b){
    	if( a.r < b.r ) return 1;
        if( a.r > b.r ) return -1;
        return 0;
        }
    );
    circles = new ArrayList();
    for(int i = 0;i < cnt;i++){
        circles.add(c_array[i]);
    }
}

ArrayList circles = new ArrayList();
int ttt = 0;

void draw(){
    fill(255,0,0);
    for(int i = 0;i < circles.size();i++){
        if(i % 3 == 0){
            fill(255,0,0);
        }else if(i % 3 == 1){
            fill(0,255,0);
        }else{
            fill(0,0,255);
        }
        circles.get(i).display();
    }
    //showAdvocate(new Circle(5));
}

class Circle{
    int x = 0;
    int y = 0;
    int r;
    ArrayList liveFriends;//close circles capable of sharing new another close circle
    
    Circle(int _r){
        r = _r;
        liveFriends = new ArrayList(); 
    }
    void display(){
        ellipse(x, y, 2 * r, 2 * r);
    }
    void addFriend(Circle c){
        liveFriends.add(c);
    }
    void deleteFriend(Circle c){
        for(int i = 0;i < liveFriends.size();i++){
            if(liveFriends.get(i) == c){
                liveFriends.remove(i);
                break;
            }
        }
    }
    float dist2(){
        return x * x + y * y;
    }
    boolean isFriendOf(Circle c){
        for(int i = 0;i < liveFriends.size();i++){
            if(liveFriends.get(i) == c){
                return true;
            }
        }
        return false;
    }
}

Dot getFar(Dot d1, Dot d2){
    if(sq(d1.x) + sq(d1.y) >= sq(d2.x) + sq(d2.y)){
        return d1;
    }else{
        return d2;
    }
}

class Combi{
    Circle interfered = null;
    Circle nearOne;//select nearer circle to global center
    Circle antiFriend;
    Circle c1,c2;
    Circle attachedC;
    Combi(Circle _c1, Circle _c2){
        //set c1,c2 as rotation from c2 to c1 is anti-clockwise
        if(_c1.x * _c2.y >= _c1.y * _c2.x){
            c2 = _c1;
            c1 = _c2;
        }else{
            c1 = _c1;
            c2 = _c2;
        }
        c1.addFriend(c2);
        c2.addFriend(c1);
    }
    boolean equals(Combi combi){
        return (c1 == combi.c1 && c2 == combi.c2)||(c1 == combi.c2 && c2 == combi.c1);
    }
    
    //distance between global center and a circle which is attached to this combi as sharedFriend
    Dot getDotWhenAttached(Circle _c){
        //float a = c1.r + c2.r;
        float a = dist(c1.x,c1.y,c2.x,c2.y);
        float b = c1.r + _c.r;
        float c = c2.r + _c.r;
        
        float cos_theta = (sq(a) + sq(b) - sq(c))/(2 * a * b);
        float sin_theta = sqrt(1 - sq(cos_theta));
        float relX = c2.x - c1.x;
        float relY = c2.y - c1.y;
        float newX1 = (b/a) * (relX * cos_theta - relY * sin_theta);
        float newY1 = (b/a) * (relX * sin_theta + relY * cos_theta);
        Dot res = new Dot(c1.x + newX1, c1.y + newY1);
        
        //if interference is found, mofidy!
        if(c1.dist2() <= c2.dist2()){
            nearOne = c1;
            antiFriend = c2;
        }else{
            nearOne = c2;
            antiFriend = c1;
        }
        interfered = null;
        for(int m = 0;m < nearOne.liveFriends.size();m++){
            Circle friend = nearOne.liveFriends.get(m);
            if(friend == antiFriend || friend.isFriendOf(antiFriend))continue;
            if(dist(friend.x,friend.y,res.x,res.y) < friend.r + _c.r ||
               (dist(friend.x,friend.y,antiFriend.x,antiFriend.y) <  friend.r + antiFriend.r  + _c.r * 2 && isSameSide(res, friend))){
                float a = dist(friend.x,friend.y,antiFriend.x,antiFriend.y);
                float b = friend.r + _c.r;
                float c = antiFriend.r + _c.r;
        
                float cos_theta = (sq(a) + sq(b) - sq(c))/(2 * a * b);
                float sin_theta = sqrt(1 - sq(cos_theta));
                float relX = antiFriend.x - friend.x;
                float relY = antiFriend.y - friend.y;
                float newX1 = (b/a) * (relX * cos_theta - relY * sin_theta);
                float newY1 = (b/a) * (relX * sin_theta + relY * cos_theta);
                Dot if_res1 = new Dot(friend.x + newX1, friend.y + newY1);
                float newX2 = (b/a) * (relX * cos_theta + relY * sin_theta);
                float newY2 = (b/a) * (-relX * sin_theta + relY * cos_theta);
                Dot if_res2 = new Dot(friend.x + newX2, friend.y + newY2);
                Dot temp = getFar(if_res1, if_res2);
                if(dist(temp.x, temp.y, nearOne.x, nearOne.y)< _c.r + nearOne.r)continue;
                interfered = friend;
                res = temp;
                break;
            }
        }
        return res;
    }
    boolean isSameSide(Dot res, Circle friend){
        Dot v_antiFriend = new Dot(antiFriend.x - nearOne.x, antiFriend.y - nearOne.y);
        Dot v_res = new Dot(res.x - nearOne.x, res.y - nearOne.y);
        Dot v_friend = new Dot(friend.x - nearOne.x, friend.y - nearOne.y);
        return isAntiClock(v_res, v_antiFriend) == isAntiClock(v_friend, v_antiFriend);
    }
    
    boolean contains(Circle _c1, Circle _c2){
        return (c1 == _c1 && c2 == _c2) ||  (c1 == _c2 && c2 == _c1);
    }
    
    void attach(Circle c){
        attachedC = c;
        
        if(interfered != null){
            combis.add(new Combi(c, interfered));
            deleteFromCombis(interfered, nearOne);
        }
        
        if(c1 != c0 && c2 != c0){
            for(int i = 0;i < combis.size();i++){
                if(this == combis.get(i)){
                    combis.remove(i);
                    c1.deleteFriend(c2);
                    c2.deleteFriend(c1);
                    break;
                }
            }
        }
        if(interfered != null){
            deleteFromCombis(c, nearOne);
            combis.add(new Combi(c, antiFriend));
        }else{
            combis.add(new Combi(c1,c));
            combis.add(new Combi(c2,c));
        }     
    }
}

boolean isAntiClock(Dot d1, Dot d2){
    return d1.x * d2.y > d1.y * d2.x;
}

void deleteFromCombis(Circle c1, Circle c2){
    for(int i = 0;i < combis.size();i++){
        if(combis.get(i).contains(c1, c2)){
            combis.remove(i);
            break;
        }
    }
}
Dot getModifiedPlace(Circle c1, Circle c2, int r){
    float a = dist(c1.x,c1.y,c2.x,c2.y);
    float b = c1.r + r;
    float c = c2.r + r;        
    float cos_theta = (sq(a) + sq(b) - sq(c))/(2 * a * b);
    float sin_theta = sqrt(1 - sq(cos_theta));
    float relX = antiFriend.x - friend.x;
    float relY = antiFriend.y - friend.y;
    float newX1 = (b/a) * (relX * cos_theta - relY * sin_theta);
    float newY1 = (b/a) * (relX * sin_theta + relY * cos_theta);
    Dot if_res1 = new Dot(c1.x + newX1, c1.y + newY1);
    float newX2 = (b/a) * (relX * cos_theta + relY * sin_theta);
    float newY2 = (b/a) * (-relX * sin_theta + relY * cos_theta);
    Dot if_res2 = new Dot(c1.x + newX2, c1.y + newY2);
    return getFar(if_res1, if_res2);
}
</script>

<h1>Aggregated Particle</h1>
<div>
    <canvas width="600" height="600"></canvas>
</div>