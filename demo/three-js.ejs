<% modules.push("bootstrap"); %>
<% modules.push("three"); %>
<% title = "Three.js test" %>

<script>
    //reference url
    //http://yomotsu.net/blog/2012/12/01/create-terrain-with-threejs.html

    var WIDTH = window.innerWidth, HEIGHT = window.innerHeight;
    var renderer, scene, camera, light, controls;
    var theta = 0;

    function init() {
        initScene();
        myanimate();
        $("#stop").click(stop);
    }

    function initScene() {
        //WebGLを使用しないCanvasRendererというのもある。
        renderer = new THREE.WebGLRenderer({antialias: true});
        renderer.setSize(WIDTH, HEIGHT);

        //レンダラーのクリアカラー（背景色とアルファ値）を設定
        renderer.setClearColorHex(0xffffff, 1);
        $("#test_canvas").append(renderer.domElement);

        //sceneとは仮想３次元空間
        scene = new THREE.Scene();
        //scene.fog = new THREE.FogExp2( 0xAA9966, 0.015 );//地平線付近をかすませる

        //透視投影カメラの引数：画角,縦横比,視体積の手前までの距離,視体積の奥までの距離
        camera = new THREE.PerspectiveCamera(50, WIDTH / HEIGHT, 1, 2000);
        //位置座標を設定
        camera.position.set(700, 0, 85);

        camera.up.set(0, 0, 1);
        //カメラ視野の中心座標を設定
        //必ず各設定の最後によぶこと。これにより他の設定も反映される
        camera.lookAt(new THREE.Vector3(0, 0, 0));

//    controls = new THREE.OrbitControls(camera);
//    controls.center = new THREE.Vector3(0, 0, 0);
//    controls.addEventListener("change", renderer);
//    controls.autoRotate = true;
//    controls.autoRotateSpeed = 2;

        light = new THREE.DirectionalLight(0xffffff, 1);
        light.position.set(20, 40, -15);
        light.target.position.copy(scene.position);
        light.castShadow = true;
        light.shadowCameraLeft = -60;
        light.shadowCameraTop = -60;
        light.shadowCameraRight = 60;
        light.shadowCameraBottom = 60;
        light.shadowCameraNear = 20;
        light.shadowCameraFar = 200;
        light.shadowBias = -.0001
        light.shadowMapWidth = light.shadowMapHeight = 2048;
        light.shadowDarkness = .7;
        scene.add(light);

        var plane = new THREE.Mesh(
                //引数：分割セグメント数（方向１）、分割セグメント数（方向２）
                new THREE.PlaneGeometry(1000, 1000, 20, 20),
                //overdraw: true にするとセグメント境界が非表示になるらしい
                new THREE.MeshBasicMaterial({color: 0x555555, wireframe: true})
        );
        //plane.rotation.z = 0.5;
        scene.add(plane);

        //立方体を追加
        addCube(-1, 0, 4);
        addCube(-1, 1, 2);
        addCube(-1, 2, 0);
        addCube(0, 3, 4);
        addCube(0, 4, 2);
        addCube(0, 0, 0);
        addCube(1, 1, 4);
        addCube(1, 2, 3);
        addCube(1, 3, 2);
        addCube(1, 4, 1);
        addCube(1, 0, 0);

        addCube(-5, 0, 4);
        addCube(-5, 1, 2);
        addCube(-5, 2, 1);
        addCube(-5, 3, 0);
        addCube(-4, 4, 4);
        addCube(-4, 0, 2);
        addCube(-4, 1, 0);
        addCube(-3, 2, 4);
        addCube(-3, 3, 3);
        addCube(-3, 4, 2);
        addCube(-3, 0, 0);
    }

    function addCube(x, y, z) {
        var cube = new THREE.Mesh(
                new THREE.CubeGeometry(50, 50, 50),//縦・横・高さ
                new THREE.MeshLambertMaterial({color: 0xff0000})//材質オブジェクト
                //MeshLambertMaterial = 光源からの光を反射する材質
        );
        scene.add(cube);
        cube.position.set(25 + 50 * x, 25 + 50 * y, 25 + 50 * z);
    }

    var anime;
    var timer = 0;
    function myanimate() {
        anime = requestAnimationFrame(myanimate);//再起無限ループによるアニメーション
//    var timer = Date.now(); 
//    camera.position.x = 800 * Math.sin( timer / 15 * Math.PI / 360);
//    camera.position.y = 800 * Math.cos( timer / 15 * Math.PI / 360);
        timer = timer + 0.005;
        if (timer == 2)timer = 0;
        camera.position.x = 800 * Math.sin(timer * Math.PI);
        camera.position.y = 800 * Math.cos(timer * Math.PI);

        camera.lookAt(new THREE.Vector3(0, 0, 0));
        //camera.position.z = 50 * Math.cos( timer / 100 * Math.PI / 360 );
        //controls.update();
        //theta = theta + 0.1;

        //camera.position.z = 300;
        renderer.render(scene, camera);

        $("#stop").val("stop");
        $("#stop").unbind().click(stop);
    }

    function stop() {
        cancelAnimationFrame(anime);
        $("#stop").val("restart");
        $("#stop").unbind().click(myanimate);
    }

    $(function () {
        init();
    });

</script>

<div id="test_canvas"></div>
<input type="button" id="stop" value="stop">

