<% title = "Japan Pets Killed Data 2016" %>
<% dependsOn(["d3.v3", "d3-queue", "topojson", "underscore"]); %>
<% description = "Japan Pets Killed Data 2016" %>
<% keywords = "Japan,pets,dog,cat,killed,map" %>
<% url = "viz/japan-prefecture-map.html" %>

<style type="text/css">
    .pref {
        cursor: pointer;
    }

    svg {
        /*position: absolute !important;*/
        /*top: 0px;*/
        border: 2px black solid;
        stroke: darkgrey;
    }

    #stage {
        width: 800px;
        height: 840px
    }
</style>


<h1><%= title %></h1>
data-source(2016): <a href="#">here</a>
<!--<div id="chain-selector">-->
    <!--<div class="ui checkbox mobile hidden" v-for="chain in chains">-->
        <!--<input type="checkbox" id="{{ chain}}" value="{{chain}}" checked="true" v-model="checkedChains" v-on:click="clicked">-->
        <!--<label for="{{chain}}" class="lbl-chain"><img src="img/{{chain}}.png" alt=""></label>-->
    <!--</div>-->
    <!--<div class="ui checkbox mobile only" v-for="chain in chains">-->
        <!--<input type="checkbox" id="{{ chain}}" value="{{chain}}" checked="true" v-model="checkedChains" v-on:click="clicked">-->
        <!--<label for="{{chain}}" class="lbl-chain">{{chain}}</label>-->
    <!--</div>-->
<!--</div>-->
<div id="stage"></div>

<script>

  var width = $("#stage").width();
  var height = $("#stage").height();

  var svg = d3.select("#stage").append("svg")
    .attr("width", width)
    .attr("height", height);

  var projection = d3.geo.mercator()
    .center([137, 38.4])
    .scale(2500)
    .translate([width / 2, height / 2]);

  var path = d3.geo.path().projection(projection);

  $(function () {
    d3.queue()
      .defer(d3.json, "data/japan.json")
      .defer(d3.csv, "data/pets_killed_2016.csv")
      .defer(d3.csv, "data/seirei.csv")
      .defer(d3.csv, "data/chukaku.csv")
      .await(function (error, japan, pets, seirei, chukaku) {

        pets.forEach(function (d) {
          d.dog = +d.dog;
          d.cat = +d.cat;
        });

        var colorRange = [
          "#BDECDA",
          "#04703F",
          "#000000"
        ];

        var min = d3.min(pets, function (d) {
          return d.dog;
        });
        var max = d3.max(pets, function (d) {
          return d.dog;
        })
        console.log("min",min);
        console.log("max",max);
        var color = d3.scale.linear()
            .range(colorRange)
            .domain([Math.floor(min), (min+max)/2,  Math.ceil(max)]);

        var topo = topojson.feature(japan, japan.objects.pref).features;

        console.log(topo);
        topo.forEach(function (d) {
          var found = _.find(pets, function(p){
            return p.pref == d.properties.name_local;
          });
          if (found) {
            d.dog = found.dog;
          }
        });
        
        
        svg.selectAll(".pref")
          .data(topo)
          .enter()
          .append("path")
          .attr("class", function (d, i) {
            return "pref pref" + i;
          })
          .attr("fill", function(d){
            console.log(d);
            return color(d.dog);
          })
          .attr("d", path);

        // move Okinawa
        svg.select(".pref46").attr("transform", "translate(650, -250)");
        
        // draw a line separating Okinawa
        var lineFunction = d3.svg.line()
          .x(function (d) {
            return d.x;
          })
          .y(function (d) {
            return d.y;
          })
          .interpolate("linear");
        var lineData = [
          {"x": 510, "y": 830}, 
          {"x": 600, "y": 630},
          {"x": 790, "y": 630}
          ];
        svg.append("path")
          .attr("d", lineFunction(lineData))
          .attr("stroke-width", 2)
          .attr("fill", "none");
      });
  });

</script>

<script>
  var indication = new Vue({
    el: '#indication',
    data: {
      prefName: ""
    }
  });
</script>


