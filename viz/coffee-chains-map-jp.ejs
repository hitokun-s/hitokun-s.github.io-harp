<%- include('../_lib') %>
<% layout = "semantic-sidebar" %>
<% title = "Coffee Chain Locations in Japan" %>
<% dependsOn(title, ["d3.v3","d3-queue","leaflet"]); %>

<% description = "Coffee Chains Location Map in Japan" %>
<% keywords = "coffee,cafe,chain,map,location,Japan" %>
<% image = "img/coffee-chains-map-jp.png" %>
<!--<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/leaflet-providers/1.1.15/leaflet-providers.min.js"></script>-->

<style>
    #map{
        width: 100%;
        height: 100%;
        padding-top:98px;
    }
    .coffee-header{
        padding-left: 10px;
        padding-bottom: 3px;
        position: absolute;
    }
    .lbl-chain{
        height:40px;
    }
    .lbl-chain img{
        height:100%;
    }
    .pusher{
        height:100%;
        position: relative;
    }
    
</style>

<div class="coffee-header">
    <h1><%= title %></h1>
    <div id="chain-selector">
        <div class="ui checkbox" v-for="chain in chains">
            <input type="checkbox" id="{{ chain}}" value="{{chain}}" checked="true" v-model="checkedChains" v-on:click="clicked">
            <label for="{{chain}}" class="lbl-chain"><img src="img/{{chain}}.png" alt=""></label>
        </div>
    </div>    
</div>
<script>
    var layerTitles = [
            "starbucks","komeda","doutor","tullys"
    ];
    var chains = new Vue({
        el: '#chain-selector',
        data: {
            chains: layerTitles,
            checkedChains: [true, true, true, true]
        },
        methods: {
            clicked: function(e){
                map.getLayers().getArray()[layerTitles.indexOf(e.target.value) + 1].setVisible(e.target.checked);
            }
        },
        watch: {
            "checkedChains": function(v){
                console.log(v);
            }
        },
        components: {
        }
    });
</script>

<div id="map"></div>
<link rel="stylesheet" href="https://openlayers.org/en/v4.0.1/css/ol.css" type="text/css">
<script src="https://openlayers.org/en/v4.0.1/build/ol.js" type="text/javascript"></script>
<script>
    var map;
    $(function () {
        
        var layer = new ol.layer.Tile({
            source: new ol.source.XYZ({
                url: 'https://api.mapbox.com/styles/v1/mapbox/light-v9/tiles/256/{z}/{x}/{y}?access_token=pk.eyJ1IjoiaGl0b2t1biIsImEiOiJjaXVqYnd0NXUwMGRwMm9tc3RvcGZ1ZDZ5In0.Q4wyiiGDLH_lTi3zzFcAtA'
            })
        });

        map = new ol.Map({
            layers: [layer],
            target: 'map',
            view: new ol.View({
                center: ol.proj.transform([138, 37.8], 'EPSG:4326', 'EPSG:3857'),
                zoom: 6
            })
        });

        d3.queue()
                .defer(d3.csv, "data/starbucks.csv")
                .defer(d3.csv, "data/komeda.csv")
                .defer(d3.csv, "data/doutor.csv")
                .defer(d3.csv, "data/tullys.csv")
                .await(function(error, starbucks, komeda, doutor, tullys) {
                    if (error) {
                        console.error('Oh dear, something went wrong: ' + error);
                        return;
                    }
                    
                    var addMarkers = function(data, color, name){
                        var markers = new ol.layer.Vector({
                            source: new ol.source.Vector({
                                features: data.map(function(d){
                                    return new ol.Feature({
                                        geometry: new ol.geom.Point(ol.proj.fromLonLat([parseFloat(d.lng), parseFloat(d.lat)])),
                                        name: d.name
                                    })
                                })
                            }),
                            style: new ol.style.Style({
                                image: new ol.style.Circle({
                                    radius: 1,
                                    stroke: new ol.style.Stroke({
                                        color: color
                                    }),
                                    fill: new ol.style.Fill({
                                        color: color
                                    })
                                })
                            })
                        });
                        markers.set("name", name);
                        map.addLayer(markers);
                    };
                    addMarkers(starbucks, "red", "starbucks");
                    addMarkers(komeda, "blue", "komeda");
                    addMarkers(doutor, "green", "doutor");
                    addMarkers(tullys, "brown", "tullys");

                    map.on("pointerdrag", function(){
                        console.log(chains.checkedChains);
                        map.getLayers().getArray().forEach(function(l,i){
                            if(i == 0)return;
                            l.setVisible(false);
                        });
                    });

                    map.on("moveend", function(){
                        map.getLayers().getArray().forEach(function(l,i){
                            if(i == 0)return;
                            if(chains.checkedChains.indexOf(l.get("name")) > -1){
                                l.setVisible(true);    
                            }
                        });
                    });
                });
        
    });
</script>
